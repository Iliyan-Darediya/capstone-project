{"ast":null,"code":"var _jsxFileName = \"/Users/iliyandarediya/Documents/GitHub/Capstone-project/src/components/Cheecker.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { Context } from '../Context';\nimport { db } from \"../firebase\";\nimport MovieCard from \"./MovieCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cheecker() {\n  _s();\n\n  //const {checkMatches} = useContext(Context)\n  //const {result} = useContext(Context)\n  //const {obj} = useContext(Context)\n  const [data, setData] = useState({});\n  const [duplicateArray, setDuplicateArray] = useState([]);\n  const [movies, setMovies] = useState([]);\n  const [selectedMovies, setSelectedMovies] = useState([]);\n  const [id, setId] = useState(0);\n  useEffect(() => {\n    db.collection(\"User\").onSnapshot(snapshot => {\n      let changes = snapshot.docChanges();\n      changes.forEach(item => {\n        if (item.doc.id == id) {\n          setData(item.doc.data());\n        }\n      });\n    });\n  }, [id]);\n  useEffect(() => {\n    let bunch = [];\n\n    for (const name in data) {\n      bunch.push(data[name]);\n    }\n\n    let ondDBunch = [].concat(...bunch);\n    ondDBunch.sort();\n    console.log(ondDBunch);\n    ondDBunch = ondDBunch.filter((value, index, self) => self.indexOf(value) !== index);\n    console.log(ondDBunch);\n    setDuplicateArray(ondDBunch);\n    setDuplicateArray(movies => movies.filter(movie => movie !== \"KevinAddedItem0\"));\n    console.log(duplicateArray);\n  }, [data]);\n  /* useEffect(()=>{\n      if(duplicateArray.length>0){\n          duplicateArray.map(movieName=>{\n              console.log(movieName)\n              //searchMovies(movieId)\n          })\n      }\n  },[duplicateArray]) */\n\n  useEffect(() => {\n    console.log(selectedMovies);\n  }, [selectedMovies]);\n\n  const searchMovies = async movieId => {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}?api_key=5dcf7f28a88be0edc01bbbde06f024ab&language=en-US`;\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      console.log(data.results);\n      console.log(\"selectedMovies\");\n      console.log(selectedMovies);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  /* const checkMatches = moviesArray =>{\n      let index\n      const dupes = []\n      for(let i = 0;i<moviesArray.length;i++){\n          index = Math.abs(moviesArray[i])-1\n           if(moviesArray[i]<0){\n              dupes.push(index +1)\n          }else{\n              moviesArray[index] *= -1\n          }\n      }\n  } */\n\n  /* implement an input box to get the id and show the movie card based on the movie id and the API */\n  //let i = result.map(r=><h9>{r}</h9>)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cheecker page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: id,\n        name: \"id\",\n        placeholder: \"EnterId\",\n        onChange: event => {\n          setId(event.target.value.toString());\n          movies.map(movieId => searchMovies(movieId));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4 p-12 bg-gray-900\",\n      children: duplicateArray.map(movie => /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: movie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cheecker, \"wbryy8n5Vz9tWrGVcpKrvNVoN7w=\");\n\n_c = Cheecker;\nexport default Cheecker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cheecker\");","map":{"version":3,"sources":["/Users/iliyandarediya/Documents/GitHub/Capstone-project/src/components/Cheecker.js"],"names":["useContext","useEffect","useState","Context","db","MovieCard","Cheecker","data","setData","duplicateArray","setDuplicateArray","movies","setMovies","selectedMovies","setSelectedMovies","id","setId","collection","onSnapshot","snapshot","changes","docChanges","forEach","item","doc","bunch","name","push","ondDBunch","concat","sort","console","log","filter","value","index","self","indexOf","movie","searchMovies","movieId","url","res","fetch","json","results","err","error","event","target","toString","map"],"mappings":";;;AAAA,SAAQA,UAAR,EAAoBC,SAApB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB;AACA;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACa,EAAD,EAAKC,KAAL,IAAcd,QAAQ,CAAC,CAAD,CAA5B;AACAD,EAAAA,SAAS,CAAC,MAAI;AACVG,IAAAA,EAAE,CAACa,UAAH,CAAc,MAAd,EAAsBC,UAAtB,CAAiCC,QAAQ,IAAE;AACvC,UAAIC,OAAO,GAAGD,QAAQ,CAACE,UAAT,EAAd;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgBC,IAAI,IAAE;AAClB,YAAGA,IAAI,CAACC,GAAL,CAAST,EAAT,IAAaA,EAAhB,EAAmB;AACfP,UAAAA,OAAO,CAACe,IAAI,CAACC,GAAL,CAASjB,IAAT,EAAD,CAAP;AACH;AACJ,OAJD;AAKH,KAPD;AAQH,GATQ,EASP,CAACQ,EAAD,CATO,CAAT;AAUAd,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIwB,KAAK,GAAG,EAAZ;;AACA,SAAI,MAAMC,IAAV,IAAkBnB,IAAlB,EAAuB;AACnBkB,MAAAA,KAAK,CAACE,IAAN,CAAWpB,IAAI,CAACmB,IAAD,CAAf;AACH;;AACD,QAAIE,SAAS,GAAG,GAAGC,MAAH,CAAU,GAAGJ,KAAb,CAAhB;AACAG,IAAAA,SAAS,CAACE,IAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACAA,IAAAA,SAAS,GAAGA,SAAS,CAACK,MAAV,CAAiB,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,KAAwBA,IAAI,CAACC,OAAL,CAAaH,KAAb,MAAwBC,KAAjE,CAAZ;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACAlB,IAAAA,iBAAiB,CAACkB,SAAD,CAAjB;AACAlB,IAAAA,iBAAiB,CAACC,MAAM,IAAIA,MAAM,CAACsB,MAAP,CAAcK,KAAK,IAAEA,KAAK,KAAG,iBAA7B,CAAX,CAAjB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYvB,cAAZ;AACH,GAbQ,EAaP,CAACF,IAAD,CAbO,CAAT;AAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACIN,EAAAA,SAAS,CAAC,MAAI;AACV8B,IAAAA,OAAO,CAACC,GAAR,CAAYnB,cAAZ;AACH,GAFQ,EAEP,CAACA,cAAD,CAFO,CAAT;;AAIA,QAAM0B,YAAY,GAAG,MAAOC,OAAP,IAAmB;AACpC,UAAMC,GAAG,GAAI,sCAAqCD,OAAQ,0DAA1D;;AACA,QAAI;AACA,YAAME,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;AACA,YAAMlC,IAAI,GAAI,MAAMmC,GAAG,CAACE,IAAJ,EAApB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAYzB,IAAI,CAACsC,OAAjB;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYnB,cAAZ;AACH,KAND,CAMC,OAAMiC,GAAN,EAAU;AACPf,MAAAA,OAAO,CAACgB,KAAR,CAAcD,GAAd;AACH;AACJ,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACA;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACA;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAE/B,EAFX;AAGI,QAAA,IAAI,EAAC,IAHT;AAII,QAAA,WAAW,EAAC,SAJhB;AAKI,QAAA,QAAQ,EAAGiC,KAAD,IAAS;AACfhC,UAAAA,KAAK,CAAEgC,KAAK,CAACC,MAAN,CAAaf,KAAd,CAAqBgB,QAArB,EAAD,CAAL;AACAvC,UAAAA,MAAM,CAACwC,GAAP,CAAWX,OAAO,IAAED,YAAY,CAACC,OAAD,CAAhC;AACH;AARL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAoBA;AAAK,MAAA,SAAS,EAAE,yCAAhB;AAAA,gBACK/B,cAAc,CAAC0C,GAAf,CAAmBb,KAAK,iBAAE;AAAA,kBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,cAA1B;AADL;AAAA;AAAA;AAAA;AAAA,YApBA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;;GAnGQhC,Q;;KAAAA,Q;AAqGT,eAAeA,QAAf","sourcesContent":["import {useContext, useEffect, useState} from \"react\";\nimport {Context} from '../Context'\nimport {db} from \"../firebase\";\nimport MovieCard from \"./MovieCard\"\n\nfunction Cheecker() {\n    //const {checkMatches} = useContext(Context)\n    //const {result} = useContext(Context)\n    //const {obj} = useContext(Context)\n    const [data, setData] = useState({})\n    const [duplicateArray, setDuplicateArray] = useState([])\n    const [movies, setMovies] = useState([]);\n    const [selectedMovies, setSelectedMovies] = useState([]);\n    const [id, setId] = useState(0)\n    useEffect(()=>{\n        db.collection(\"User\").onSnapshot(snapshot=>{\n            let changes = snapshot.docChanges()\n            changes.forEach(item=>{\n                if(item.doc.id==id){\n                    setData(item.doc.data())\n                }\n            })\n        })\n    },[id])\n    useEffect(()=>{\n        let bunch = []\n        for(const name in data){\n            bunch.push(data[name])\n        }\n        let ondDBunch = [].concat(...bunch)\n        ondDBunch.sort()\n        console.log(ondDBunch)\n        ondDBunch = ondDBunch.filter((value, index, self) => self.indexOf(value) !== index)\n        console.log(ondDBunch)\n        setDuplicateArray(ondDBunch)\n        setDuplicateArray(movies => movies.filter(movie=>movie!==\"KevinAddedItem0\"))\n        console.log(duplicateArray)\n    },[data])\n\n    /* useEffect(()=>{\n        if(duplicateArray.length>0){\n            duplicateArray.map(movieName=>{\n                console.log(movieName)\n                //searchMovies(movieId)\n            })\n        }\n    },[duplicateArray]) */\n    useEffect(()=>{\n        console.log(selectedMovies)\n    },[selectedMovies])\n\n    const searchMovies = async (movieId) => {  \n        const url = `https://api.themoviedb.org/3/movie/${movieId}?api_key=5dcf7f28a88be0edc01bbbde06f024ab&language=en-US`;\n        try {\n            const res = await fetch(url);\n            const data  = await res.json();\n            console.log(data.results);\n            console.log(\"selectedMovies\")\n            console.log(selectedMovies)\n        }catch(err){\n            console.error(err);\n        }\n    }\n    /* const checkMatches = moviesArray =>{\n        let index\n        const dupes = []\n        for(let i = 0;i<moviesArray.length;i++){\n            index = Math.abs(moviesArray[i])-1\n\n            if(moviesArray[i]<0){\n                dupes.push(index +1)\n            }else{\n                moviesArray[index] *= -1\n            }\n        }\n    } */\n    /* implement an input box to get the id and show the movie card based on the movie id and the API */\n    //let i = result.map(r=><h9>{r}</h9>)\n    return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n            <h1>Cheecker page</h1>\n            <input \n                type=\"text\" \n                value={id} \n                name=\"id\" \n                placeholder=\"EnterId\" \n                onChange={(event)=>{\n                    setId((event.target.value).toString())\n                    movies.map(movieId=>searchMovies(movieId))\n                }} \n            />\n        </header>\n        {/* <div className= \"grid grid-cols-3 gap-4 p-12 bg-gray-900\">\n            {movies!=undefined?movies.filter(movie => movie.poster_path).map(movie => (\n                <MovieCard movie={movie} key={movie.id} />\n            )):<h2>We are getting your movies</h2>\n            }\n        </div> */}\n        <div className= \"grid grid-cols-3 gap-4 p-12 bg-gray-900\">\n            {duplicateArray.map(movie=><h2>{movie}</h2>)}\n        </div>\n        </div>\n    );\n}\n  \nexport default Cheecker;"]},"metadata":{},"sourceType":"module"}