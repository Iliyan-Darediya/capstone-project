{"ast":null,"code":"var _jsxFileName = \"/Users/iliyandarediya/Documents/GitHub/Capstone-project/src/components/Cheecker.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { db } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cheecker() {\n  _s();\n\n  const [data, setData] = useState({});\n  const [duplicateArray, setDuplicateArray] = useState([]);\n  const [movies, setMovies] = useState([]);\n  const [selectedMovies, setSelectedMovies] = useState([]);\n  const [id, setId] = useState(0); //get movies based on user id\n\n  useEffect(() => {\n    db.collection(\"User\").onSnapshot(snapshot => {\n      let changes = snapshot.docChanges();\n      changes.forEach(item => {\n        if (item.doc.id == id) {\n          setData(item.doc.data());\n        }\n      });\n    });\n  }, [id]); //Get duplicate values(same movies) from the users\n\n  useEffect(() => {\n    let bunch = [];\n\n    for (const name in data) {\n      bunch.push(data[name]);\n    }\n\n    let ondDBunch = [].concat(...bunch);\n    ondDBunch.sort();\n    console.log(ondDBunch);\n    ondDBunch = ondDBunch.filter((value, index, self) => self.indexOf(value) !== index);\n    console.log(ondDBunch);\n    setDuplicateArray(ondDBunch);\n    setDuplicateArray(movies => movies.filter(movie => movie !== \"KevinAddedItem0\"));\n    console.log(duplicateArray);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cheecker page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: id,\n        name: \"id\",\n        placeholder: \"EnterId\",\n        onChange: event => {\n          setId(event.target.value.toString()); //movies.map(movieId=>searchMovies(movieId))\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4 p-12 bg-gray-900\",\n      children: duplicateArray.map(movie => /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: movie\n      }, movie, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cheecker, \"b19Hxbt4IPxH2AwILlldscy3NNI=\");\n\n_c = Cheecker;\nexport default Cheecker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cheecker\");","map":{"version":3,"sources":["/Users/iliyandarediya/Documents/GitHub/Capstone-project/src/components/Cheecker.js"],"names":["useEffect","useState","db","Cheecker","data","setData","duplicateArray","setDuplicateArray","movies","setMovies","selectedMovies","setSelectedMovies","id","setId","collection","onSnapshot","snapshot","changes","docChanges","forEach","item","doc","bunch","name","push","ondDBunch","concat","sort","console","log","filter","value","index","self","indexOf","movie","event","target","toString","map"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport {db} from \"../firebase\";\n\nfunction Cheecker() {\n    const [data, setData] = useState({})\n    const [duplicateArray, setDuplicateArray] = useState([])\n    const [movies, setMovies] = useState([]);\n    const [selectedMovies, setSelectedMovies] = useState([]);\n    const [id, setId] = useState(0)\n\n    //get movies based on user id\n    useEffect(()=>{\n        db.collection(\"User\").onSnapshot(snapshot=>{\n            let changes = snapshot.docChanges()\n            changes.forEach(item=>{\n                if(item.doc.id==id){\n                    setData(item.doc.data())\n                }\n            })\n        })\n    },[id])\n\n    //Get duplicate values(same movies) from the users\n    useEffect(()=>{\n        let bunch = []\n        for(const name in data){\n            bunch.push(data[name])\n        }\n        let ondDBunch = [].concat(...bunch)\n        ondDBunch.sort()\n        console.log(ondDBunch)\n        ondDBunch = ondDBunch.filter((value, index, self) => self.indexOf(value) !== index)\n        console.log(ondDBunch)\n        setDuplicateArray(ondDBunch)\n        setDuplicateArray(movies => movies.filter(movie=>movie!==\"KevinAddedItem0\"))\n        console.log(duplicateArray)\n    },[data])\n\n    return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n            <h1>Cheecker page</h1>\n            <input \n                type=\"text\" \n                value={id} \n                name=\"id\" \n                placeholder=\"EnterId\" \n                onChange={(event)=>{\n                    setId((event.target.value).toString())\n                    //movies.map(movieId=>searchMovies(movieId))\n                }} \n            />\n        </header>\n        <div className= \"grid grid-cols-3 gap-4 p-12 bg-gray-900\">\n            {duplicateArray.map(movie=><h2 key={movie}>{movie}</h2>)}\n        </div>\n        </div>\n    );\n}\n  \nexport default Cheecker;"]},"metadata":{},"sourceType":"module"}