{"ast":null,"code":"var _jsxFileName = \"/Users/iliyandarediya/My Code/movie-matcher/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { db } from \"./firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext();\n\nfunction ContextProvider({\n  children\n}) {\n  _s();\n\n  const [currentId, setCurrentId] = useState(3);\n  const [name, setName] = useState(\"Emily\");\n  const [obj, setObj] = useState({});\n  const [result, setResult] = useState([]);\n  useEffect(() => {\n    //------THE MAIN METHOD UNCOMMENT IT BEFORE USE-----------//\n\n    /* db.collection(\"User\").onSnapshot(snapshot=>{\n        let changes = snapshot.docChanges()\n        changes.forEach(item=>{\n            //console.log(\"From context \"+item.doc.data())\n            //console.log(\"From context \"+item.doc.id)\n            if(parseInt(item.doc.id)>=0){\n                setCurrentId(item.doc.id)\n            }\n        })\n    }) */\n    db.collection(\"User\").onSnapshot(snapshot => {\n      let changes = snapshot.docChanges();\n      changes.forEach(item => {\n        if (item.doc.id == \"3\") {\n          setObj(item.doc.data());\n        } //console.log(item.doc.id)\n\n\n        if (parseInt(item.doc.id) >= 0) {\n          setCurrentId(item.doc.id);\n        }\n      });\n    });\n  }, []); //console.log(\"current id from context \"+currentId)\n\n  const requestNewId = name => {\n    setName(name);\n    setCurrentId(prevId => {\n      let currentId = parseInt(prevId);\n      currentId++;\n      return currentId.toString();\n    });\n    db.collection(\"User\").doc(currentId).set({\n      [name]: [\"KevinAddedItem0\"]\n    }, {\n      merge: true\n    });\n  };\n\n  const handleDelete = id => {\n    db.collection(\"User\").doc(id).delete();\n    console.log(\"handleDelete button Clicked\");\n  };\n\n  const handleAdd = name => {\n    setName(name);\n    db.collection(\"User\").doc(currentId).set({\n      [name]: [\"KevinAddedItem0\"]\n    }, {\n      merge: true\n    });\n  };\n\n  const addMovie = movieName => {\n    db.collection(\"User\").doc(currentId).update({\n      [name]: window.firebase.firestore.FieldValue.arrayUnion(movieName)\n    });\n  };\n\n  const checkMatches = () => {\n    /* var docRef = db.collection(\"User\").doc(currentId.toString());\n    docRef.get().then((doc) => {\n        if (doc.exists) {\n            setObj(doc.data());\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document! \" + currentId);\n        }\n    }).catch((error) => {\n        console.log(\"Error getting document:\", error);\n    }); */\n    console.log(obj);\n    let bunch = [];\n\n    for (const [key, value] of Object.entries(obj)) {\n      value.map(item => bunch.push(item)); //console.log(`${value}`);\n    }\n\n    let findDuplicates = arr => arr.filter((item, index) => arr.indexOf(item) !== index);\n\n    setResult(findDuplicates(bunch));\n    console.log(obj);\n    console.log(\"current Id \" + currentId);\n    console.log(result);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      currentId,\n      handleDelete,\n      handleAdd,\n      addMovie,\n      requestNewId,\n      checkMatches\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ContextProvider, \"b0cWifN3y1w1OQ2+EKwLLvk6BB4=\");\n\n_c = ContextProvider;\nexport { ContextProvider, Context };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/iliyandarediya/My Code/movie-matcher/src/Context.js"],"names":["React","useState","useEffect","db","Context","createContext","ContextProvider","children","currentId","setCurrentId","name","setName","obj","setObj","result","setResult","collection","onSnapshot","snapshot","changes","docChanges","forEach","item","doc","id","data","parseInt","requestNewId","prevId","toString","set","merge","handleDelete","delete","console","log","handleAdd","addMovie","movieName","update","window","firebase","firestore","FieldValue","arrayUnion","checkMatches","bunch","key","value","Object","entries","map","push","findDuplicates","arr","filter","index","indexOf"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from \"react\"\nimport {db} from \"./firebase\"\n\nconst Context = React.createContext()\n\nfunction ContextProvider({children}) {\n\n    const [currentId,setCurrentId] = useState(3)\n    const [name,setName] = useState(\"Emily\")\n    const [obj,setObj] = useState({})\n    const [result,setResult] = useState([])\n\n    useEffect(()=>{\n        //------THE MAIN METHOD UNCOMMENT IT BEFORE USE-----------//\n        /* db.collection(\"User\").onSnapshot(snapshot=>{\n            let changes = snapshot.docChanges()\n            changes.forEach(item=>{\n                //console.log(\"From context \"+item.doc.data())\n                //console.log(\"From context \"+item.doc.id)\n                if(parseInt(item.doc.id)>=0){\n                    setCurrentId(item.doc.id)\n                }\n            })\n        }) */ \n        db.collection(\"User\").onSnapshot(snapshot=>{\n            let changes = snapshot.docChanges()\n            changes.forEach(item=>{\n                if(item.doc.id==\"3\"){\n                    setObj(item.doc.data())\n                }\n                //console.log(item.doc.id)\n                if(parseInt(item.doc.id)>=0){\n                    setCurrentId(item.doc.id)\n                }\n            })\n        }) \n    },[])\n    \n    //console.log(\"current id from context \"+currentId)\n    \n    const requestNewId = name =>{\n        setName(name)\n        setCurrentId(prevId=>{\n            let currentId = parseInt(prevId)\n            currentId++\n            return(currentId.toString())\n        })\n        db.collection(\"User\").doc(currentId).set({\n            [name] : [\"KevinAddedItem0\"]\n        },{merge:true})\n    }\n\n    const handleDelete = id =>{\n        db.collection(\"User\").doc(id).delete()\n        console.log(\"handleDelete button Clicked\")\n    }\n\n    const handleAdd = name =>{\n        setName(name)\n        db.collection(\"User\").doc(currentId).set({\n            [name] : [\"KevinAddedItem0\"]\n        },{merge:true})\n    }\n\n    const addMovie=(movieName)=>{\n        db.collection(\"User\").doc(currentId).update({\n            [name]:window.firebase.firestore.FieldValue.arrayUnion(movieName)\n        })\n    }\n\n    const checkMatches=()=>{\n        \n        /* var docRef = db.collection(\"User\").doc(currentId.toString());\n        docRef.get().then((doc) => {\n            if (doc.exists) {\n                setObj(doc.data());\n            } else {\n                // doc.data() will be undefined in this case\n                console.log(\"No such document! \" + currentId);\n            }\n        }).catch((error) => {\n            console.log(\"Error getting document:\", error);\n        }); */\n        console.log(obj)\n    \n        let bunch = []\n        for (const [key, value] of Object.entries(obj)) {\n            value.map(item=>bunch.push(item))\n            //console.log(`${value}`);\n        }\n        let findDuplicates = arr => arr.filter((item, index) => arr.indexOf(item) !== index)  \n        setResult(findDuplicates(bunch)); \n        console.log(obj)\n        console.log(\"current Id \" + currentId)\n        console.log(result)\n    }\n\n    return (\n        <Context.Provider value={{currentId,handleDelete,handleAdd,addMovie,requestNewId,checkMatches}}>\n            {children}\n        </Context.Provider>\n    )\n}\n\nexport {ContextProvider, Context}"]},"metadata":{},"sourceType":"module"}